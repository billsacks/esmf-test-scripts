#!/bin/bash -l
rfile=$1



############################### Read the file for log directory and email recipient #######

datestamp=`date +%y%m`
logfile="${datestamp}_test"
echo " The logfile is $logfile"
here=`pwd`


if grep -i "LOG_DIR1" $rfile > tmp
then
        read location log_dir log_tmp < tmp
        cd $log_dir
        if test ! -d  $logfile
        then
                # Make new directory if doesn't exist
                mkdir $logfile
        fi
        cd $here
        echo "LOGDIR1 is $log_dir/$logfile"
        export LOGDIR=$log_dir/$logfile
fi

if grep -i "LOGDIR2" $rfile > tmp
then
        read location log_dir2 < tmp
        cd $log_dir2
        if test ! -d  $logfile
        then
                mkdir $logfile
        fi
        cd $here

        echo "LOGDIR2 is $log_dir2/$logfile"
        export LOGDIR2=$log_dir2/$logfile
fi

if grep -i "BENCHMARKINSTALL" $rfile > tmp
then
        read BM  BENCHMARKINSTALL < tmp
        export BENCHMARKINSTALL=$BENCHMARKINSTALL
        echo "BENCHMARKINSTALL  is $BENCHMARKINSTALL"
fi



if grep -i "email_to" $rfile > tmp
then
	read location emailuser < tmp
	echo "Email user is $emailuser"
fi

if grep -i "email_title" $rfile > tmp
then
	read location email_title < tmp
	echo "Email title is $email_title"
fi


rm -f tmp

rm -f $LOGDIR/mailMessage
rm -f $LOGDIR/newMailMessage
rm -f $LOGDIR/header
rm -f $LOGDIR/mailHeader
rm -f $LOGDIR/newsummary
rm -f $LOGDIR/sum
rm -f $LOGDIR/summary


# Set test status as green, assume it will run clean
echo "Test_results:green" > $LOGDIR/Test_Status
echo "Set Test Status to green."

#Set day of the week
echo "Day_of_Week:`date +%A`" > $LOGDIR/Day_Started


#Set Number of test failure
echo "0" > $LOGDIR/Test_Failures



echo "" >> $LOGDIR/header
echo "Script start time: `date`" >> $LOGDIR/header

cd $homedir

############################### Extract script to checkout ESMF ###########################
cat  > $homedir/exp_co << \THE-END-OF-EXP-CO
#!/usr/bin/expect --

set sfuser [lindex $argv 0]
set sfpword [lindex $argv 1]
set tag [lindex $argv 2]
send_user " tag is $tag"

set timeout 3600

if { $tag == "" } {

        spawn  cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P esmf
        #spawn  cvs -d svasquez@login.sourceforge.net:/home/groups/e/es/esmf/backupCVS co -d esmf -P esmf

} else {

        spawn cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P -r $tag esmf
}


expect {
        "password: "
                        {

                                send "$sfpword\r"

                        }
        "(yes/no)?"
                        {

                                send "yes\r"

                                exp_continue


                        }
        "(yes/no)? "
                        {

                                send "yes\r"

                                exp_continue

                        }
        "Connection closed by remote host"
                        {
                                exit
                        }


        }



expect eof


THE-END-OF-EXP-CO


############################### Extract script to checkout ESMF ###########################
cat  > exp_git << \THE-END-OF-EXP-GIT
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 900

#spawn git clone git://esmf.git.sourceforge.net/gitroot/esmf/esmf 
spawn git clone git://git.code.sf.net/p/esmf/esmf esmf

expect  eof


THE-END-OF-EXP-GIT

cat  > git_tag << \THE-END-OF-GIT_TAG
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 900

spawn git checkout tags/$tag

expect  eof


THE-END-OF-GIT_TAG






############################### Parse the compute file and checkout esmf where indicated ##

number=1
while grep "^$number " $rfile >tmp
do
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded mpmd ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $mpmd $ck_out_opt $tag"
	if [[ $ck_out_opt = "co" ]]
	then
		umask 002
	 	export CVS_RSH=ssh
                export CVS_RSH=ssh
                cd $directory
                pwd
                rm -rf esmf
                # Execute the script to checkout the esmf
                expect $homedir/exp_git
                if test ! -d  esmf
                then
                        echo "Sleeping 900"
                        sleep 900
                        # Try again
                        expect $homedir/exp_git
                        if test ! -d  esmf
                        then
                                echo "Unable to checkout ESMF from SourceForge." > mailMessage
                                echo "No tests were run" >> mailMessage
                                mail -s  $email_title $emailuser <  mailMessage
                                mail -s  $email_title esmf-test.esrl@noaa.gov <  mailMessage
                                rm -rf mailMessage
                                rm -f $homedir/.outFile
                                Set test status as blue, checkout failed.
                                echo "Test_results:blue" > $LOGDIR/Test_Status
                                echo "Set Test Status to blue."
                                cat $LOGDIR/Test_Status >> $LOGDIR/newMailMessage
                                mail -s ESMF_Hopper_intel silverio.vasquez@noaa.gov <  $LOGDIR/newMailMessage
                                mail -s ESMF_Hopper_intel esmf_test@noaa.gov < $LOGDIR/newMailMessage
                         else
                                if [[ $tag != "" ]]
                                then
                                        cd esmf
                                        expect $homedir/git_tag $tag
                                        cd ..
                                fi
                        fi
                else
                        if [[ $tag != "" ]]
                        then
                                cd esmf
                                expect $homedir/git_tag $tag
                                cd ..
                        fi
        
                fi

                cd $homedir
        fi
        number=`expr $number + 1`
        echo "number = $number"
done

rm -f exp_co

 ############################### Extract script to checkout ESMF Contrib Site ###########################
 cat  > $homedir/exp_co << \THE-END-OF-EXP-CO
 #!/usr/bin/expect --

 set sfuser [lindex $argv 0]
 set sfpword [lindex $argv 1]
 set module [lindex $argv 2]
 
 set timeout 900

if { $module == "blackforest" || $module == "babyblue"|| $module == "bluesky"|| $module == "chinook" || $module == "longs" || $module == "mika" } { 
		set module "ncar"
	}
 
 spawn  cvs -z3 -d:ext:$sfuser@esmfcontrib.cvs.sourceforge.net:/cvsroot/esmfcontrib co $module
 
 expect {
       "password: "
                       {
 
                                 send "$sfpword\r"
 
                         }
         "(yes/no)?"
                         {
 
                                 send "yes\r"
 
                                 exp_continue
 
 
                         }
         "(yes/no)? "
                         {
 
                                 send "yes\r"
 
                                 exp_continue
 
                         }
 
         }
 
 
 
 expect eof
 
THE-END-OF-EXP-CO
 
 ############################### Parse the compute file and checkout esmf contrib  module where indicated ##
 
 number=1
 while grep "^$number " $rfile >tmp
 do
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded mpmd ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $mpmd $ck_out_opt $tag"
       if [[ $site != "default" ]]
       then
                umask 002
                export CVS_RSH=ssh
                cd $directory/esmf/build_config
		dir_size=`ls | wc -l`
		echo "dir_size = $dir_size"
                # Execute the script to checkout the esmfconfig
                expect $homedir/exp_co $sfuser $sfpword $site
               # Check if checkout was successful
                new_dir_size=`ls | wc -l`
		echo "new_dir_size = $new_dir_size"
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 10"
                        sleep 10
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 900"
                        sleep 900
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 1800"
                	sleep 1800
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 3600"
                	sleep 3600
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
                      	cd $homedir
                        echo "Unable to checkout ESMFCONTRIB from SourceForge." > mailMessage
                        echo "No tests were run" >> mailMessage
                        mail -s  $email_title $emailuser <  mailMessage
                        mail -s  $email_title esmf_test@ucar.edu <  mailMessage
                        rm -rf mailMessage
			# Can't go any further
			rm -f $homedir/.outFile
                        exit
		else
			# Done if successfull
			break 
		fi
       fi
       number=`expr $number + 1`
       echo "number = $number"
 done
 
rm -f $homedir/.outFile
cd $homedir



 
################ Execute test in jaguar  #######################

#### Extract script to run system test
cat  > exec_test << \THE-END-OF-EXEC_TEST
#!/usr/bin/expect --
 
set test_type [lindex $argv 0]
set ESMF_DIR [lindex $argv 1]
set ESMF_BOPT [lindex $argv 2]
set ESMF_COMM [lindex $argv 3]
set sys_test [lindex $argv 4]
set sys_test_type [lindex $argv 5]
set unit_test_type [lindex $argv 6]
set u_tests [lindex $argv 7]
set threaded [lindex $argv 8]
set bash_pid [spawn /bin/bash]


set prompt "(%|>|#|\\$) $"          ;# default prompt

catch {set prompt $env(EXPECT_PROMPT)}

expect -re $prompt

send "export ESMF_OS=`uname -s` \r"

expect -re $prompt

send "export ESMF_COMPILER=intel \r"

expect -re $prompt

send "export ESMF_SITE=default \r"

expect -re $prompt

send "cd $ESMF_DIR \r"

expect -re $prompt

if { $u_tests == "EX" } {
	send "export  ESMF_TESTEXHAUSTIVE=ON \r"
} else {
	send "export ESMF_TESTEXHAUSTIVE=OFF \r"
}

expect -re $prompt

if { $threaded == "THREADED" } {
	send "export ESMF_TESTWITHTHREADS=ON \r"
} else {
	send "export ESMF_TESTWITHTHREADS=OFF \r"
}

expect -re $prompt

set timeout 3700
spawn  bsub  -Ip -q small -W 1:00 -n 8 -P P35071400 /bin/bash 
#spawn  bsub  -Ip -q small -W 1:00 -n 16 -P P35071386 /bin/bash 
#spawn  bsub  -Ip -q small -W 1:00 -n 16 -P SCSG0002 /bin/bash 

expect {
        "Starting"
                        {

                                send "\r"
    
                        }
    
        }


set prompt "(%|>|#|\\$) $"          ;# default prompt

catch {set prompt $env(EXPECT_PROMPT)}

expect -re $prompt

send "cd $ESMF_DIR \r"

expect -re $prompt

set timeout 3600

if { $test_type == "demo" } {
	if { $sys_test_type == "UNI" } {

        	send "gmake run_demos_uni > tmp\r"

	} else {

        	send "gmake run_demos > tmp\r"
	}

} elseif { $test_type == "sys_test" } {

	if { $sys_test_type == "UNI" } {

		send "gmake run_system_tests_uni  > tmp\r"

	} else {

		send "gmake  run_system_tests  > tmp\r"
	}

} elseif { $test_type == "examples" } {


	if { $sys_test_type == "UNI" } {

        	send "gmake run_examples_uni  > tmp\r"

	} else {

        	send "gmake run_examples  > tmp\r"
	}

} elseif { $test_type == "unit" } {

	if { $unit_test_type == "UNI" } {

        	send "gmake run_unit_tests_uni  > tmp\r"

	} else {

        	send "gmake run_unit_tests  > tmp\r"
	}
}
 
expect {
	-re $prompt
                        {
        
                                send "exit\r"
        
                        }
        "completed"
                        {

                                send "\r"

                        }

        }

expect -re $prompt

THE-END-OF-EXEC_TEST

chmod 777 exec_test

 


############################### Extract test_esmf ########################################

cat > $homedir/test_esmf << \BUILD-ESMF
#!/bin/bash
#PBS -eo -q reg -l nodes=1:ppn=1

cd $ESMF_DIR

env

#Clobber previous arch files
gmake clobber  1> tmp 2>&1


echo "" >> $LOGDIR/mailMessage
echo "_______________________________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

test_results=0  #assume build passes
install_results=0  #assume install passes
tests=0
test_failures=0
ex_passed=0
ex_failed=0

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage
echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
git remote -v 1> tmp 2>&1

if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi


echo "Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage

echo " " >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

echo " " >> $LOGDIR/mailMessage
gmake ESMF_BOPT=$OPT info 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage

export unit_tests_build=1  #assume unit tests will not build


gmake ESMF_BOPT=$OPT  1> tmp 2>&1
if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	fi #end of if [ $OPT != g ]

	echo "`date` library build ****************FAIL" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage


        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi
        
	

else

       	echo "Library build PASS with ESMF_BOPT=$OPT"
	echo "`date` library build ................PASS" >> $LOGDIR/mailMessage

        # Check for warnings
        if grep -i "warning[ ]*:" tmp
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi

	# check if all files should be logged
	if [[ $LOGTMP = "ALL" ]]
	then
        	if [ $OPT != g ]
        	then 
                	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	else    
                	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	fi #end of if [ $OPT != g ]
	fi # end of if [[ $LOGTMP = "ALL" ]]


        gmake ESMF_BOPT=$OPT  build_apps 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "build apps FAILED with ESMF_BOPT=$OPT"
                install_results=1  # build apps failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/buils_apps_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/buils_apps_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
                echo "`date` apps build *******************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the build_apps failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi


                else

                echo "build apps PASSED with ESMF_BOPT=$OPT"
                echo "`date` apps build ...................PASS" >> $LOGDIR/mailMessage

        fi #end of build apps




        gmake ESMF_BOPT=$OPT  install 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Library install FAILED with ESMF_BOPT=$OPT"
                install_results=1  # install failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/install_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/install_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]

                echo "`date` library install **************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi


                else

                echo "Library install PASSED with ESMF_BOPT=$OPT"
                echo "`date` library install ..............PASS" >> $LOGDIR/mailMessage

                gmake ESMF_BOPT=$OPT  installcheck 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Library install check FAILED with ESMF_BOPT=$OPT"
                        install_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/installcheck_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/installcheck_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` library installcheck *********FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi


                        else

                        echo "Library install PASSED with ESMF_BOPT=$OPT"
                        echo "`date` library installcheck .........PASS" >> $LOGDIR/mailMessage

                fi

                gmake ESMF_BOPT=$OPT  build_quick_start 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Quick start build check FAILED with ESMF_BOPT=$OPT"
                        quickstart_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/quickstart_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/quickstart_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` quickstart build *************FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the quickstart build  failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi


                        else

                        echo "Quickstart build passed with ESMF_BOPT=$OPT"
                        echo "`date` quickstart build .............PASS" >> $LOGDIR/mailMessage
                        quickstart_results=0  # quick_start passed

                fi



        fi

	echo "" >> $LOGDIR/mailMessage
	echo "|----------------------- SYSTEM TESTS -------------------------|" >> $LOGDIR/mailMessage


        
        gmake  ESMF_BOPT=$OPT build_system_tests 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "system_tests build FAIL "
                echo "`date` build_system_tests ***********FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the system tests failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi


        else
                echo "build_system_tests PASS "
                echo "`date` build_system_tests ...........PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

        fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT build_system_tests 1> tmp 2>&1

        
        if [[ $ESMF_COMM = "lam" ]]
        then
                lamhalt
                sleep 30
                lamboot -ssi  rpi tcp
        fi #end of  if [[ $ESMF_COMM = "lam" ]]
                

        # Run the system tests on jaguar
        $homedir/exec_test sys_test $ESMF_DIR $OPT $ESMF_COMM dummy $SYS_TEST_TYPE $U_TESTS_TYPE $U_TESTS $THREADED



       if [[ $SYS_TEST_TYPE = "UNI" ]]
       then
       		echo "run_system_tests_uni PASS "
                        echo "`date` run_system_tests_uni .........PASS" >> $LOGDIR/mailMessage
                else
                        echo "run_system_tests PASS "
                        echo "`date` run_system_tests .............PASS" >> $LOGDIR/mailMessage
                fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

        if [[ $LOGTMP = "ALL" ]]
        then
                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
         fi # end of if [[ $LOGTMP = "ALL" ]]

	gmake check_system_tests >> $LOGDIR/mailMessage
	read pass sysTestPass fail sysTestFail < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/system_tests_results
        if [[ $sysTestFail != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $sysTestFail`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."
        fi



        #make tarballs of test directories
        mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar --atime-preserve -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM


	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "|------------------------- EXAMPLES ---------------------------|" >> $LOGDIR/mailMessage



        gmake  ESMF_BOPT=$OPT build_examples 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "examples build FAIL "
                echo "`date` build_examples build *********FAIL" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the examples failure">> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi


        else
                echo "build_examples PASS "
                echo "`date` build_examples ...............PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

        fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT build_examples 1> tmp 2>&1

        if [[ $ESMF_COMM = "lam" ]]
        then
                lamhalt
                sleep 30
                lamboot -ssi  rpi tcp
        fi #end of  if [[ $ESMF_COMM = "lam" ]]




        # Run the examples on sn702
        $homedir/exec_test examples $ESMF_DIR $OPT $ESMF_COMM dummy $SYS_TEST_TYPE $U_TESTS_TYPE $U_TESTS $THREADED

        if [[ $SYS_TEST_TYPE = "UNI" ]]
        then
                echo "run_examples_uni PASS "
                echo "`date` run_examples_uni .............PASS" >> $LOGDIR/mailMessage
         else
                echo "run_examples PASS "
                echo "`date` run_examples .................PASS" >> $LOGDIR/mailMessage
        fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

        if [[ $LOGTMP = "ALL" ]]
        then
                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                fi #end of if [ $OPT != g ]
         fi # end of if [[ $LOGTMP = "ALL" ]]

		
	gmake check_examples >> $LOGDIR/mailMessage
	read pass ex_passed fail ex_failed < $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/examples_results

        if [[ $ex_failed != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $ex_failed`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."

        fi



        # Make tarball of the examples Log and stdout files
        mkdir examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xml examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xsd examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar --atime-preserve -cf examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        mv -f examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        rm -rf examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM


	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage


	if [[ $U_TESTS = "NON" ]]
	then
		echo "|-------------------NON_EXHAUSTIVE UNIT TESTS -----------------|" >> $LOGDIR/mailMessage
	else
		echo "|-------------------- EXHAUSTIVE UNIT TESTS -------------------|" >> $LOGDIR/mailMessage
	fi # end of if [[ $U_TESTS = "NON" ]]
	gmake  build_unit_tests 1> tmp 2>&1
	if [ "$?" != "0" ]
        then
        	echo "build_unit_tests FAIL "
		echo "`date` build_unit_tests *************FAIL" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the build_unit_tests failure">> $LOGDIR/mailMessage

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

		if [ $OPT != g ]
		then
			cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		else
			cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi


	else
		echo "build_unit_tests PASS "
		echo "`date` build_unit_tests .............PASS" >> $LOGDIR/mailMessage
		export unit_tests_build=0 # Checked for running benchmarking

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

	fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  build_unit_tests 1> tmp 2>&1


        if [[ $ESMF_COMM = "lam" ]]
        then
                lamhalt
                sleep 30
                lamboot -ssi  rpi tcp
        fi #end of  if [[ $ESMF_COMM = "lam" ]]




        # Run the unit tests on sn702
        $homedir/exec_test unit $ESMF_DIR $OPT $ESMF_COMM dummy $SYS_TEST_TYPE $U_TESTS_TYPE $U_TESTS $THREADED

        if [[ $U_TESTS_TYPE = "UNI" ]]
        then
                echo "run_unit_tests_uni PASS "
                echo "`date` run_unit_tests_uni ...........PASS" >> $LOGDIR/mailMessage
        else
                echo "run_test PASS "
                echo "`date` run_unit_tests ...............PASS" >> $LOGDIR/mailMessage
        fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]
        if [[ $LOGTMP = "ALL" ]]
        then
                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                fi #end of if [ $OPT != g ]
        fi # end of if [[ $LOGTMP = "ALL" ]]


	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
                
        gmake check_unit_tests >> $LOGDIR/mailMessage
        read pass num_pass_total fail test_failures < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/unit_tests_results 
                
        if [[ $test_failures != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $test_failures`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."

        fi


        #make tarballs of test directories
        mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xml test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xsd test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/test_harness* test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar --atime-preserve -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM


fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  1> tmp 2>&1

# Make name as short as possible
name=`uname -n | sed 's/\..*//'`


if [[ $test_results != 0 ]] 
then  #The build failed
	echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
	if [[ $install_results != 0 || $quickstart_results != 0 ]]
        then  #The install failed
                echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $num_pass_total/$test_failures $ex_passed/$ex_failed $sysTestPass/$sysTestFail" >> $LOGDIR/summary
        else
                echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $num_pass_total/$test_failures $ex_passed/$ex_failed $sysTestPass/$sysTestFail" >> $LOGDIR/summary
        fi
fi #end of if [$test_results != 0]

if [[ $test_results != 1 || $unit_tests_build != 1 ]]
then  #If the library build or the unit tests build failed,  don't run benchmarking

	if [[ $BENCHMARKINSTALL = "YES" ]]
	then
        	make ESMF_BOPT=$OPT install_unit_tests_benchmark 1> tmp 2>&1
        	if [ "$?" != "0" ]
        	then
                	echo "install_unit_tests_benchmark  FAIL "
                	echo "`date` install_unit_tests_benchmark *FAIL" >> $LOGDIR/mailMessage
                	if [ $OPT != g ]
                	then
                        	cat tmp > $LOGDIR/benchmark_install`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	else
                        	cat tmp > $LOGDIR/benchmark_install`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	fi # end of if [ $OPT != g ]
                	echo "" >> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	echo "The following is the 'tail' of the install_unit_tests_benchmark failure">> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	tail  -50 tmp >> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi
        	else
                	echo "install_unit_tests_benchmark  PASS "
                	echo "`date` install_unit_tests_benchmark .PASS" >> $LOGDIR/mailMessage
        	fi
	fi
	
	make ESMF_BOPT=$OPT run_unit_tests_benchmark 1> tmp 2>&1
	if [ "$?" != "0" ]
	then
        	echo "run_unit_tests_benchmark  FAIL "
        	echo "`date` run_unit_tests_benchmark *****FAIL" >> $LOGDIR/mailMessage
        	if [ $OPT != g ]
        	then
                	cat tmp > $LOGDIR/benchmark_run`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	else
                	cat tmp > $LOGDIR/benchmark_run`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	fi # end of if [ $OPT != g ]
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the run_unit_tests_benchmark failure">> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	# Set test status as lime, if it is green
        	if (grep "green" $LOGDIR/Test_Status)
        	then
                	echo "Test_results:lime" > $LOGDIR/Test_Status
                	echo "Set Test Status to lime."
        	fi
	else
        	echo "run_unit_tests_benchmark  PASS "
        	echo "`date` run_unit_tests_benchmark .....PASS" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	cat tmp >> $LOGDIR/mailMessage
        	read pass bm_pass_total fail bm_test_failures match match < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/unit_tests_bm_results
        	echo "bm_pass_total = $bm_pass_total bm_test_failures = $ bm_test_failures"
        	if [[ $bm_test_failures != 0 ]]
        	then
                	# Set test status as lime, if it is green
                	if (grep "green" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:lime" > $LOGDIR/Test_Status
                        	echo "Set Test Status to lime."
                	fi
                	# Update number of test failures
                	read failures < $LOGDIR/Test_Failures
                	total=`expr $failures + $bm_test_failures`
                	echo "$total" > $LOGDIR/Test_Failures
                	echo "New failure total is $total."
        	fi
	fi


	if [[ $test_results != 0 ]]
	then  #The build failed
        	echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
        	if [[ $install_results != 0 || $quickstart_results != 0 ]]
        	then  #The install failed
                	echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $bm_pass_total/$bm_test_failures Benchmark test results" >> $LOGDIR/summary
        	else
                	echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $bm_pass_total/$bm_test_failures Benchmark test results" >> $LOGDIR/summary
        	fi
	fi #end of if [$test_results != 0]




	echo "" >> $LOGDIR/mailMessage

fi

# keep expect happy
echo "test_esmf has finished"
BUILD-ESMF

############################# Run the tests on all computers ###############################

export First_Build=NOT_DONE
number=1
while grep "^$number " $rfile >tmp
do
	# Get the computer information
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded mpmd ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $mpmd $ck_out_opt $tag"
        cat tmp

	export ESMF_OS=`uname -s`
	export ESMF_DIR=$directory/esmf
	export LOGTMP=$log_tmp
	export OPT=g
	export ESMF_BOPT=g
	export SYS_TEST_TYPE=$sys_test_type
	export U_TESTS=$u_tests
	export U_TESTS_TYPE=$u_tests_type
	export ESMF_ABI=$abi
	export ESMF_SITE=$site
	export ESMF_COMPILER=$comp
	export ESMF_COMM=$comm
        export ESMF_INSTALL_PREFIX=$ESMF_DIR/../install_dir
	export ESMF_TESTHARNESS_FIELD=RUN_ESMF_TestHarnessField_1
        export ESMF_TESTHARNESS_ARRAY=RUN_ESMF_TestHarnessArray_2
	export MP_MPILIB=mpich2
        export ESMF_MPIRUN=mpirun.ibmpjl

        rm -rf $ESMF_INSTALL_PREFIX/*
        if [[ $threaded = "THREADED" ]]
        then
                export ESMF_TESTWITHTHREADS=ON 
        else
                export ESMF_TESTWITHTHREADS=OFF
        fi 
        if [[ $u_tests = "EX" ]]
        then
                export ESMF_TESTEXHAUSTIVE=ON
        else 
                export ESMF_TESTEXHAUSTIVE=OFF
        fi 

        if [[ $mpmd = "MPMD" ]]
        then
                export ESMF_TESTMPMD=ON
        else
                export ESMF_TESTMPMD=OFF
        fi

        if [[ $ESMF_COMPILER = "intel-16" ]]
	then
		export ESMF_COMPILER=intel
		module swap intel intel/16.0.0 
	fi

	#module load pnetcdf/1.3.0
	module load pnetcdf/1.4.1
        export ESMF_PNETCDF=standard
        #export ESMF_PNETCDF_LIBPATH=/glade/apps/opt/pnetcdf/1.3.0/intel/default/lib
        export ESMF_PNETCDF_LIBPATH=/glade/apps/opt/pnetcdf/1.4.1/intel/default/lib
        #export ESMF_PNETCDF_LIBS=-lpnetcdf
        #export ESMF_PNETCDF_INCLUDE=/glade/apps/opt/pnetcdf/1.3.0/intel/default/include
        export ESMF_PNETCDF_INCLUDE=/glade/apps/opt/pnetcdf/1.4.1/intel/default/include

	#module load netcdf/4.2
	module load netcdf/4.3.0
        export ESMF_MPIRUN=mpirun.ibmpjl
        export ESMF_NETCDF=split
        #export ESMF_NETCDF_LIBPATH=/glade/apps/opt/netcdf/4.2/intel/default/lib
        export ESMF_NETCDF_LIBPATH=/glade/apps/opt/netcdf/4.3.0/intel/default/lib
        #export ESMF_NETCDF_INCLUDE=/glade/apps/opt/netcdf/4.2/intel/default/include
        export ESMF_NETCDF_INCLUDE=/glade/apps/opt/netcdf/4.3.0/intel/default/include

	export ESMF_BENCHMARK_PREFIX=$ESMF_DIR/../BENCHMARKDIR

        export RFile=$rfile
	echo "ESMF_DIR = $ESMF_DIR"
	cd $ESMF_DIR
	chmod 777 $homedir/test_esmf
        rm -rf $ESMF_INSTALL_PREFIX/*
	$homedir/test_esmf
	export OPT=O
	export ESMF_BOPT=O
	$homedir/test_esmf
	cd $homedir
        number=`expr $number + 1`
        echo "number = $number"
done
cd $homedir
rm -f test_esmf
rm -f exp_co
rm -f tmp




echo "end of test script"
exit

